namespace Mock.Data
{
    using System;
    using System.Reflection;
    using System.Collections.Concurrent;
    using System.Collections.Generic;

    using System.Threading;
    using Mock.Data.Exception;
    public class CaseManager
    {
        private static ConcurrentDictionary<int, Lazy<string>> identificationDic = new ConcurrentDictionary<int, Lazy<string>>();
        internal static string GetIdentification()
        {
            int id = Thread.CurrentThread.ManagedThreadId;
            if (identificationDic == null)
            {
                throw new UnknownIdentificationException(id);
            }

            if (identificationDic.ContainsKey(id))
            {
                return identificationDic[id].Value;
            }

            throw new UnknownIdentificationException(id);
        }

        internal static string CreateIdentification(int id)
        {
            Lazy<string> identification = identificationDic.GetOrAdd(id, x =>
                new Lazy<string>(() =>
                    {
                        return Guid.NewGuid().ToString("N").ToUpper();
                    }));
            return identification.Value;
        }

        internal static void SetIdentification(int id)
        {
            if (identificationDic == null)
            {
                throw new UnknownIdentificationException(id);
            }

            if (identificationDic.ContainsKey(id))
            {
                throw new NotUniqueDataException(id.ToString());
            }
            int parentId = Thread.CurrentThread.ManagedThreadId;
            if (identificationDic.ContainsKey(parentId))
            {
                identificationDic.GetOrAdd(id, identificationDic[parentId]);
            }
            else
            {
                throw new UnknownIdentificationException(parentId);
            }
        }

        internal static void RemoveIdentification(string id)
        {
            if (identificationDic == null) return;
            Dictionary<int, Lazy<string>> tmp = new Dictionary<int, Lazy<string>>(identificationDic);
            foreach(KeyValuePair<int, Lazy<string>> kv in tmp)
            {
                if (string.Equals(kv.Value.Value, id)) continue;
                Lazy<string> val;
                identificationDic.TryRemove(kv.Key, out val);
            }

            if (_setDetailDic.ContainsKey(id))
            {
                SetReportDetailHandler handler;
                _setDetailDic.TryRemove(id, out handler);
            }

            if (_setHeaderDic.ContainsKey(id))
            {
                SetReportHeaderHandler header;
                _setHeaderDic.TryRemove(id, out header);
            }

            if (_setClearDic.ContainsKey(id))
            {
                SetReportClearHandler handler;
                _setClearDic.TryRemove(id, out handler);
            }
        }

        private static ConcurrentDictionary<string, SetReportDetailHandler> _setDetailDic = new ConcurrentDictionary<string, SetReportDetailHandler>();
        internal static void SetCaseReportDetailHandler(string id, SetReportDetailHandler handler)
        {
            _setDetailDic.AddOrUpdate(id, handler, (key, oldValue) => oldValue);
        }

        //private static Dictionary<string, SetReportHeaderHandler> _setHeaderDic = new Dictionary<string, SetReportHeaderHandler>();

        private static ConcurrentDictionary<string, SetReportHeaderHandler> _setHeaderDic = new ConcurrentDictionary<string, SetReportHeaderHandler>();
        internal static void SetCaseReportHeaderHandler(string id, SetReportHeaderHandler handler)
        {
            _setHeaderDic.AddOrUpdate(id, handler, (key, oldValue) => oldValue);
        }

        private static ConcurrentDictionary<string, SetReportClearHandler> _setClearDic = new ConcurrentDictionary<string, SetReportClearHandler>();
        internal static void SetCaseReportClearHandler(string id, SetReportClearHandler handler)
        {
            _setClearDic.AddOrUpdate(id, handler, (key, oldValue) => oldValue);
        }

        /// <summary>
        /// 设置明细信息
        /// </summary>
        /// <param name="detail">明细信息，这通常为TestCasePool.SetDetailColumnName所设置的结构数据</param>
        internal static void SetReportDetail(ReportDetail detail)
        {
            string id = null;
            try
            {
                id = CaseManager.GetIdentification();
            }
            catch
            {
                return;
            }
            if (!_setDetailDic.ContainsKey(id))
            {
                throw new CanNotFindDataException("Case identification");
            }

            _setDetailDic[id](detail);

        }

        /// <summary>
        /// 设置明细信息内容中包含的项目名称
        /// </summary>
        /// <param name="displayName">明细信息显示名称</param>
        /// <param name="tagName">明细信息简化名称（这通常是明细信息生成XML时的标签名称）</param>
        /// <param name="state">指示该列内容是状态标志</param>
        internal static void SetDetailColumnName(string displayName, string tagName, bool state = false)
        {
            string id = null;
            try
            {
                id = CaseManager.GetIdentification();
            }
            catch
            {
                return;
            }

            if (!_setHeaderDic.ContainsKey(id))
            {
                throw new CanNotFindDataException("Case identification");
            }

            _setHeaderDic[id](displayName, tagName, state);
        }

        /// <summary>
        /// 清除测试报告的明细信息
        /// </summary>
        internal static void ClearReportDetail()
        {
            string id = null;
            try
            {
                id = CaseManager.GetIdentification();
            }
            catch
            {
                return;
            }

            if (!_setDetailDic.ContainsKey(id))
            {
                throw new CanNotFindDataException("Case identification");
            }

            _setClearDic[id]();
        }


        internal static void Report(string name, System.Exception ex)
        {
            while (ex is TargetInvocationException)
            {
                ex = ex.InnerException;
            }
            ReportDetail rd = new ReportDetail();
            rd.SetResult(false);
            rd.Set("name", name);
            rd.Set("state", "F");
            rd.Set("expInfo", ex.Message);
            LogManager.Error(ex);
            if (ex.InnerException != null)
            {
                rd.Set("innerExpInfo", ex.InnerException.Message);
                LogManager.Error(ex.InnerException);
            }
            else
            {
                rd.Set("innerExpInfo", "");
            }
            TestCasePool.SetDetailColumnName("名称", "name");
            TestCasePool.SetDetailColumnName("状态", "state", true);
            TestCasePool.SetDetailColumnName("异常", "expInfo");
            TestCasePool.SetDetailColumnName("内部异常", "innerExpInfo");
            TestCasePool.SetReportDetail(rd);
        }

        internal static void Report(string name, string message)
        {
            ReportDetail rd = new ReportDetail();
            rd.SetResult(false);
            rd.Set("name", name);
            rd.Set("state", "F");
            rd.Set("msg", message);
            TestCasePool.SetDetailColumnName("名称", "name");
            TestCasePool.SetDetailColumnName("状态", "state", true);
            TestCasePool.SetDetailColumnName("错误信息", "msg");
            TestCasePool.SetReportDetail(rd);
        }

    }

    internal delegate void SetReportClearHandler();
    internal delegate void SetReportDetailHandler(ReportDetail detail);
    internal delegate void SetReportHeaderHandler(string displayName, string tagName, bool state);

}
